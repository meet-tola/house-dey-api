// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  email                String         @unique
  username             String         @unique
  password             String
  avatar               String?
  createdAt            DateTime       @default(now())
  role                 Role           @default(CLIENT)
  firstName            String?
  lastName             String?
  mobile               String?
  street               String?
  locality             String?
  state                String?
  country              String?
  verified             Boolean        @default(false)
  verificationToken    String?
  resetToken           String?
  resetTokenExpiration DateTime?
  post                 Post[]
  request              Request[]
  savedPost            SavedPost[]
  chats                Chat[]         @relation(fields: [chatIDs], references: [id])
  chatIDs              String[]       @db.ObjectId
  notifications        Notification[]
}

enum Role {
  AGENT
  CLIENT
}

model Post {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  price         Int
  images        String[]
  address       String
  role          Role           @default(AGENT)
  city          String
  bedroom       Int
  bathroom      Int
  type          Type
  property      Property
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.ObjectId
  postDetail    PostDetail?
  savedPost     SavedPost[]
  notifications Notification[]
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  shop
  hostel
}

model PostDetail {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  desc      String?
  utilities String?
  size      Int?
  post      Post    @relation(fields: [postId], references: [id])
  postId    String  @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  users       User[]    @relation(fields: [userIDs], references: [id])
  createdAt   DateTime  @default(now())
  userIDs     String[]  @db.ObjectId
  seenBy      String[]  @db.ObjectId
  message     Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userIDs   String[] @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Request {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  address       String
  type          Type
  property      Property
  budget        Int
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.ObjectId
  requestDetail RequestDetail?
}

model RequestDetail {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  comment   String?
  state     String?
  city      String?
  bedroom   String?
  request   Request @relation(fields: [requestId], references: [id])
  requestId String  @unique @db.ObjectId
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.ObjectId
}
